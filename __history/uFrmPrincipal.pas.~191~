unit uFrmPrincipal;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Buttons, ExeInfo, ComCtrls, ExtCtrls, StdCtrls, Grids, DBGrids,
  IdBaseComponent, IdComponent, IdTCPConnection, IdTCPClient, IdHTTP, CheckLst,
  DBCtrls, IdExplicitTLSClientServerBase, IdFTP;

type
  TfrmPrincipal = class(TForm)
    BtnLiberador: TSpeedButton;
    ExeInfo1: TExeInfo;
    SpeedButton2: TSpeedButton;
    btnRelatorio: TSpeedButton;
    Panel1: TPanel;
    Panel2: TPanel;
    IdHTTP: TIdHTTP;
    IdFTP1: TIdFTP;
    pcAtendimento: TPageControl;
    tabRel: TTabSheet;
    lblDataI: TLabel;
    lblDataF: TLabel;
    lblPlanoConta: TLabel;
    btnDreDet: TButton;
    Imprimir: TButton;
    Button1: TButton;
    dataI: TDateTimePicker;
    dataF: TDateTimePicker;
    btnDreRes: TButton;
    dblkcbbPlanoConta: TDBLookupComboBox;
    btnLimparFiltro: TButton;
    tabBoleto: TTabSheet;
    procedure BtnLiberadorClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure ImprimirClick(Sender: TObject);
    procedure btnRelatorioClick(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
    procedure btnDreDetClick(Sender: TObject);
    procedure btnDreResClick(Sender: TObject);
    procedure Periodo;
    procedure btnLimparFiltroClick(Sender: TObject);
    procedure LimparFiltros;
    procedure versaoRelatorio;
    function ObterDiretorioDoExecutavel: string;
    function ConectarAoServidorFTP: boolean;
    function ObterNumeroVersaoLocal: smallint;
    function ObterNumeroVersaoFTP: smallint;
    procedure BaixarAtualizacao;
    procedure DescompactarAtualizacao;
    procedure AtualizarNumeroVersao;
    procedure IdFTP1Work(ASender: TObject; AWorkMode: TWorkMode;
      AWorkCount: Int64);
    procedure AtualizarVersao;
    procedure ReiniciarAplicacao;
    procedure testarInternet;

  private
    { Private declarations }
    FnTamanhoTotal: integer;
  public
    { Public declarations }
  end;

var
  frmPrincipal: TfrmPrincipal;

implementation

uses uFrmLiberador, uDM, uDmRel, IdException, IniFiles, ShellAPI;
{$R *.dfm}

procedure TfrmPrincipal.BtnLiberadorClick(Sender: TObject);
begin
  try
    frmLiberador := TfrmLiberador.Create(Application);
    frmLiberador.ShowModal;
  finally
    FreeAndNil(frmLiberador);
  end;
end;

procedure TfrmPrincipal.btnLimparFiltroClick(Sender: TObject);
begin
  LimparFiltros;
end;

procedure TfrmPrincipal.Button1Click(Sender: TObject);
begin

  DmRel.qrRelProdCusto.Close;
  DmRel.qrRelProdCusto.SQL.Clear;
DmRel.qrRelProdCusto.SQL.Add(' SELECT F.codigo,F.referencia_fornecedor AS cod_forn, PRODUTO as Descricao, F.localicazao, J.fantasia as nome_forn, ');
DmRel.qrRelProdCusto.SQL.Add(' f.precocusto as preco_compra, c.custo_margem_0 as preco_custo, c.lucro as lucro_liq, f.precovenda ');
 DmRel.qrRelProdCusto.SQL.Add(' FROM C000025 F ');
 DmRel.qrRelProdCusto.SQL.Add(' LEFT JOIN C000009 J ON (F.codfornecedor=J.codigo) ');
 DmRel.qrRelProdCusto.SQL.Add(' left join c000026 c on (c.codproduto =f.codigo) ');

DmRel.qrRelProdCusto.SQL.Add('  WHERE F.data_ultimacompra is not null and F.data_ultimacompra between :dataI and :dataF ');

  DmRel.qrRelProdCusto.Open;

//ShowMessage(DateToStr(dataF.Date));

  with DmRel.qrRelProdCusto , SQL do
  begin
    Close;
    Params.ParamByName('dataI').AsDate := dataI.Date;
    Params.ParamByName('dataF').AsDate := dataF.Date;
    Open;
  end;

  Periodo;
  versaoRelatorio;

  with uDmRel.DmRel.frxRepProdCusto do
  begin
    LoadFromFile(ExtractFilePath(ParamStr(0)) + 'rel\PrecCusto.fr3');
    PrepareReport(True);
    ShowReport;
  end;

end;

function TfrmPrincipal.ConectarAoServidorFTP: boolean;
begin
  // desconecta, caso tenha sido conectado anteriormente
  if IdFTP1.Connected then
    IdFTP1.Disconnect;
  try
    IdFTP1.Connect;
    result := True;
  except
    On E: Exception do
    begin
      ShowMessage('Erro ao acessar o servidor de atualização: ' + E.Message);
      result := False;
    end;
  end;
end;

procedure TfrmPrincipal.DescompactarAtualizacao;
var
  sNomeArquivoAtualizacao: string;
begin
  // deleta o backup anterior, ou melhor, da versão anterior,
  // evitando erro de arquivo já existente
  if FileExists(ObterDiretorioDoExecutavel + 'Auxiliar_bkp.exe') then
    DeleteFile(ObterDiretorioDoExecutavel + 'Auxiliar_bkp.exe');

  // Renomeia o executável atual (desatualizado) para "Sistema_Backup.exe"
  RenameFile(ObterDiretorioDoExecutavel + 'Auxiliar.exe',
    ObterDiretorioDoExecutavel + 'Auxiliar_bkp.exe');

  // armazena o nome do arquivo de atualização em uma variável
  sNomeArquivoAtualizacao := ObterDiretorioDoExecutavel + 'lib.rar';

  // executa a linha de comando do 7-Zip para descompactar o arquivo baixado
  ShellExecute(0, nil, '7z',
    PWideChar(' e -aoa ' + sNomeArquivoAtualizacao + ' -o' +
        ObterDiretorioDoExecutavel), '', SW_SHOW);
end;

procedure TfrmPrincipal.btnDreResClick(Sender: TObject);
begin
{$REGION 'sql Res'}
  DmRel.qrDreRes.Close;
  DmRel.qrDreRes.SQL.Clear;
  DmRel.qrDreRes.SQL.Add('Select ');
  DmRel.qrDreRes.SQL.Add('Classificacao, ');
  DmRel.qrDreRes.SQL.Add('max(tipo) as tipo, ');
  DmRel.qrDreRes.SQL.Add('max(Nome_Conta) as Nome_conta, ');
  DmRel.qrDreRes.SQL.Add('sum(Total) as Total ');

  DmRel.qrDreRes.SQL.Add('from ');
  DmRel.qrDreRes.SQL.Add('( Select ');
  DmRel.qrDreRes.SQL.Add('c000035.classificacao as Classificacao, ');
  DmRel.qrDreRes.SQL.Add('c000035.tipo as tipo, ');
  DmRel.qrDreRes.SQL.Add('c000035.conta as Nome_Conta, ');
  DmRel.qrDreRes.SQL.Add('sum(c000042.Valor) as Total ');
  DmRel.qrDreRes.SQL.Add('from ');

  DmRel.qrDreRes.SQL.Add('c000042 ');
  DmRel.qrDreRes.SQL.Add(
    'INNER JOIN C000035 ON(C000042.codconta = c000035.CODIGO) ');
  DmRel.qrDreRes.SQL.Add('where ');
  DmRel.qrDreRes.SQL.Add('c000042.DATA between :dataI and :dataF ');

  // ShowMessage((dblkcbbPlanoConta.KeyValue));

  if Trim(dblkcbbPlanoConta.Text) <> '' then
  begin
    DmRel.qrDreRes.SQL.Add(' and C000042.codconta=' + inttostr
        (dblkcbbPlanoConta.KeyValue));
  end;

  DmRel.qrDreRes.SQL.Add(' group by ');
  DmRel.qrDreRes.SQL.Add('Classificacao, ');
  DmRel.qrDreRes.SQL.Add('tipo, ');
  DmRel.qrDreRes.SQL.Add('Nome_Conta ');

  DmRel.qrDreRes.SQL.Add('UNION ALL ');

  DmRel.qrDreRes.SQL.Add('Select ');
  DmRel.qrDreRes.SQL.Add('c000035.classificacao as Classificacao, ');
  DmRel.qrDreRes.SQL.Add('c000035.tipo as tipo, ');
  DmRel.qrDreRes.SQL.Add('c000035.conta as Nome_Conta, ');
  DmRel.qrDreRes.SQL.Add(
    'sum((coalesce(c000044.entrada,0) - coalesce(c000044.saida,0))) as Total ');
  DmRel.qrDreRes.SQL.Add('from ');
  DmRel.qrDreRes.SQL.Add('c000044 ');
  DmRel.qrDreRes.SQL.Add(
    'INNER JOIN C000035 ON(C000044.codconta = c000035.codigo) ');
  DmRel.qrDreRes.SQL.Add('where 1=1 ');

  if Trim(dblkcbbPlanoConta.Text) <> '' then
  begin
    DmRel.qrDreRes.SQL.Add(' and C000044.codconta=' + inttostr
        (dblkcbbPlanoConta.KeyValue));
  end;

  DmRel.qrDreRes.SQL.Add(' and c000044.DATA between   :dataI and :dataF ');
  DmRel.qrDreRes.SQL.Add(
    'and (coalesce(c000044.entrada,0) - coalesce(c000044.saida,0)) <>0 ');
  DmRel.qrDreRes.SQL.Add('and  historico <> ''S A L D O   A N T E R I O R'' ');
  DmRel.qrDreRes.SQL.Add('and historico <> ''Acerto do Saldo Anterior'' ');

  DmRel.qrDreRes.SQL.Add('group by ');
  DmRel.qrDreRes.SQL.Add('Classificacao, ');
  DmRel.qrDreRes.SQL.Add('tipo, ');
  DmRel.qrDreRes.SQL.Add('Nome_Conta ');
  DmRel.qrDreRes.SQL.Add(')  as tmp ');
  DmRel.qrDreRes.SQL.Add('group by classificacao ');

  DmRel.qrDreRes.Open;
{$ENDREGION}
  with DmRel.qrDreRes, SQL do
  begin
    Close;
    Params.ParamByName('DataI').AsDate := dataI.Date;
    Params.ParamByName('DataF').AsDate := dataF.Date;
    Open;
  end;

  Periodo;
  versaoRelatorio;

  with uDmRel.DmRel.frxRepProdCusto do
  begin
    LoadFromFile(ExtractFilePath(ParamStr(0)) + 'rel\DreRes.fr3');
    PrepareReport(True);
    ShowReport;
  end;
end;

procedure TfrmPrincipal.AtualizarNumeroVersao;
var
  oArquivoLocal, oArquivoFTP: TIniFile;
  sNumeroNovaVersao: string;
begin
  // abre os dois arquivos INI
  oArquivoFTP := TIniFile.Create(ObterDiretorioDoExecutavel +
      'VersaoFTPAuxiliar.ini');
  oArquivoLocal := TIniFile.Create(ObterDiretorioDoExecutavel +
      'VersaoLocalAuxiliar.ini');
  try
    // obtém o número da nova versão no arquivo "VersaoFTP.ini"...
    sNumeroNovaVersao := oArquivoFTP.ReadString('VersaoFTP', 'Numero',
      EmptyStr);

    // ... e grava este número no arquivo "VersaoLocal.ini"
    oArquivoLocal.WriteString('VersaoLocal', 'Numero', sNumeroNovaVersao);
  finally
    FreeAndNil(oArquivoFTP);
    FreeAndNil(oArquivoLocal);
  end;
end;

procedure TfrmPrincipal.AtualizarVersao;
var
  nNumeroVersaoLocal, nNumeroVersaoFTP: smallint;
begin
  if not ConectarAoServidorFTP then
    Exit;

  nNumeroVersaoLocal := ObterNumeroVersaoLocal;
  nNumeroVersaoFTP := ObterNumeroVersaoFTP;

  if nNumeroVersaoLocal < nNumeroVersaoFTP then
  begin

    ShellExecute(0, nil, PChar('atualizar_Auxiliar.exe'), '', nil,
      SW_SHOWNORMAL);
    Application.Terminate;

    // ShowMessage('vai atualizar..');

  end
  else
  begin
    // ShowMessage('O sistema já está atualizado.');

  end;

end;

procedure TfrmPrincipal.BaixarAtualizacao;
begin
  try
    // deleta o arquivo "Atualizacao.rar", caso exista,
    // evitando erro de arquivo já existente
    if FileExists(ObterDiretorioDoExecutavel + 'lib.rar') then
      DeleteFile(ObterDiretorioDoExecutavel + 'lib.rar');

    // obtém o tamanho da atualização e preenche a variável "FnTamanhoTotal"
    FnTamanhoTotal := IdFTP1.Size('lib.rar');

    // faz o download do arquivo "Atualizacao.rar"
    IdFTP1.Get('lib.rar', ObterDiretorioDoExecutavel + 'lib.rar', True, True);
  except
    On E: Exception do
    begin
      // ignora a exceção "Connection Closed Gracefully"
      if E is EIdConnClosedGracefully then
        Exit;

      ShowMessage('Erro ao baixar a atualização: ' + E.Message);

      // interrompe a atualização
      Abort;
    end;
  end;
end;

procedure TfrmPrincipal.btnDreDetClick(Sender: TObject);
begin
{$REGION 'sql Det'}
  DmRel.qrDreDet.Close;
  DmRel.qrDreDet.SQL.Clear;
  DmRel.qrDreDet.SQL.Add(' Select ');
  DmRel.qrDreDet.SQL.Add(' Classificacao, ');
  DmRel.qrDreDet.SQL.Add(' tipo, ');
  DmRel.qrDreDet.SQL.Add(' Nome_Conta, ');
  DmRel.qrDreDet.SQL.Add(' historico, ');
  DmRel.qrDreDet.SQL.Add(' origem, ');
  DmRel.qrDreDet.SQL.Add(' data, ');
  DmRel.qrDreDet.SQL.Add(' Total ');
  DmRel.qrDreDet.SQL.Add(' from ');

  DmRel.qrDreDet.SQL.Add(' ( Select ');
  DmRel.qrDreDet.SQL.Add(' c000035.classificacao as Classificacao, ');
  DmRel.qrDreDet.SQL.Add(' c000035.tipo as tipo, ');
  DmRel.qrDreDet.SQL.Add(' c000035.conta as Nome_Conta, ');
  DmRel.qrDreDet.SQL.Add(' c000044.data, ');
  DmRel.qrDreDet.SQL.Add(' c000044.historico, ');
  DmRel.qrDreDet.SQL.Add(' c000044.codconta as origem, ');
  DmRel.qrDreDet.SQL.Add(
    ' (coalesce(c000044.entrada,0) - coalesce(c000044.saida,0)) as Total ');
  DmRel.qrDreDet.SQL.Add(' from ');
  DmRel.qrDreDet.SQL.Add(' c000044 ');
  DmRel.qrDreDet.SQL.Add(
    ' INNER JOIN C000035 ON(C000044.codconta = c000035.codigo) ');
  DmRel.qrDreDet.SQL.Add(' where ');

  DmRel.qrDreDet.SQL.Add(' c000044.DATA  between :dataI and :dataF ');

  DmRel.qrDreDet.SQL.Add(
    ' and (coalesce(c000044.entrada,0) - coalesce(c000044.saida,0)) <>0 ');
  DmRel.qrDreDet.SQL.Add(' and  historico <> ''S A L D O   A N T E R I O R'' ');
  DmRel.qrDreDet.SQL.Add(' and historico <> ''Acerto do Saldo Anterior'' ');

  if Trim(dblkcbbPlanoConta.Text) <> '' then
  begin
    DmRel.qrDreDet.SQL.Add(' and C000044.codconta=' + inttostr
        (dblkcbbPlanoConta.KeyValue));
  end;

  DmRel.qrDreDet.SQL.Add(' union all ');

  DmRel.qrDreDet.SQL.Add(' Select ');
  DmRel.qrDreDet.SQL.Add(' c000035.classificacao as Classificacao, ');
  DmRel.qrDreDet.SQL.Add(' c000035.tipo as tipo, ');
  DmRel.qrDreDet.SQL.Add(' c000035.conta as Nome_Conta, ');
  DmRel.qrDreDet.SQL.Add(' c000042.data, ');
  DmRel.qrDreDet.SQL.Add(' c000042.historico, ');
  DmRel.qrDreDet.SQL.Add(' c000042.codconta as origem, ');
  DmRel.qrDreDet.SQL.Add(' (c000042.Valor) as Total ');
  DmRel.qrDreDet.SQL.Add(' from ');

  DmRel.qrDreDet.SQL.Add(' c000042 ');
  DmRel.qrDreDet.SQL.Add(
    ' INNER JOIN C000035 ON(C000042.codconta = c000035.CODIGO) ');
  DmRel.qrDreDet.SQL.Add(' where ');
  DmRel.qrDreDet.SQL.Add(' c000042.DATA  between :dataI and :dataF ');

  if Trim(dblkcbbPlanoConta.Text) <> '' then
  begin
    DmRel.qrDreDet.SQL.Add(' and C000042.codconta=' + inttostr
        (dblkcbbPlanoConta.KeyValue));
  end;

  DmRel.qrDreDet.SQL.Add(' )  as tmp ');
  DmRel.qrDreDet.SQL.Add(' order by ');
  DmRel.qrDreDet.SQL.Add(' Classificacao, ');
  DmRel.qrDreDet.SQL.Add(' data, ');
  DmRel.qrDreDet.SQL.Add(' historico, ');
  DmRel.qrDreDet.SQL.Add(' Total ');

  DmRel.qrDreDet.Open;
{$ENDREGION}
  with DmRel.qrDreDet, SQL do
  begin
    Close;
    Params.ParamByName('DataI').AsDate := dataI.Date;
    Params.ParamByName('DataF').AsDate := dataF.Date;
    Open;
  end;

  Periodo;
  versaoRelatorio;

  with uDmRel.DmRel.frxRepProdCusto do
  begin
    LoadFromFile(ExtractFilePath(ParamStr(0)) + 'rel\DreDet.fr3');
    PrepareReport(True);
    ShowReport;
  end;
end;

procedure TfrmPrincipal.FormShow(Sender: TObject);
begin
  LimparFiltros; // limpar filtros

  // desabilita qrweb
  dm.web.Connected := False;

  // testa internet

  BtnLiberador.Visible := False;
  // ShowMessage(dm.con.HostName+' - '+dm.con.Database);
  frmPrincipal.caption := caption + ' Versão: ' + ExeInfo1.FileVersion;

  with dm.qrClienteWeb, SQL do
  begin
    Close;
    Clear;
    Text := 'select * from cliente where cpf_cnpj = :cnpj';
    ParamByName('cnpj').Value := dm.qrFilial.FieldByName('cnpj').Value;
    Open;
  end;

  // ShowMessage(inttostr(dm.qrClienteWeb.RecordCount));
  if dm.qrClienteWeb.RecordCount = 0 then
  begin
    dm.qrClienteWeb.Close;
    dm.qrClienteWeb.SQL.Clear;
    dm.qrClienteWeb.SQL.Text := 'INSERT INTO `atoms053_web`.`cliente` ' +
      '(`cod`, `razao`, `cpf_cnpj`, bloqueado) ' +
      ' VALUES (:cod, :razao, :cpf_cnpj, :bloqueado)';

    dm.qrClienteWeb.ParamByName('cod').AsInteger := 1000;
    dm.qrClienteWeb.ParamByName('razao').AsString := dm.qrFilial.FieldByName
      ('FILIAL').AsString;
    dm.qrClienteWeb.ParamByName('cpf_cnpj').AsString := dm.qrFilial.FieldByName
      ('cnpj').AsString;
    dm.qrClienteWeb.ParamByName('Bloqueado').AsString := 'SIM';

    dm.qrClienteWeb.ExecSQL;

  end;

  if dm.qrClienteWeb.FieldByName('Bloqueado').Value = 'NAO' then
    BtnLiberador.Visible := True;

end;

procedure TfrmPrincipal.IdFTP1Work(ASender: TObject; AWorkMode: TWorkMode;
  AWorkCount: Int64);
var
  nTamanhoTotal, nTransmitidos, nPorcentagem: real;
begin

end;

procedure TfrmPrincipal.ImprimirClick(Sender: TObject);
begin

  with DmRel.qrVendaCartaoSnfce, SQL do
  begin
    Close;
    Clear;
    Add('select c000048.codigo,  c000048.data, c000007.nome, c000048.total from c000048 '
        + 'left join c000007 on (c000007.codigo = c000048.codcliente) ' +
        'where (c000048.meio_cartaocred >0 or c000048.meio_cartaodeb>0) and c000048.nfce is null '
        + 'and c000048.data between ' +

        QuotedStr(FormatDateTime('dd.mm.YYYY', dataI.Date))
        + ' and ' + QuotedStr(FormatDateTime('dd.mm.YYYY', dataF.Date)));
    Open;
  end;

  Periodo;

  with uDmRel.DmRel.frxRepVendaCartaoSnfce do
  begin
    LoadFromFile(ExtractFilePath(ParamStr(0)) + 'rel\VendaCartaoSnfce.fr3');
    PrepareReport(True);
    ShowReport;
  end;
end;

procedure TfrmPrincipal.LimparFiltros;
begin
  dblkcbbPlanoConta.KeyValue := '';
  // dblkcbbPlanoConta.Text := '';
  dataI.Date := Date - 1; // StrToDate('01/05/2018');
  dataF.Date := Date; // StrToDate('31/05/2018');
end;

function TfrmPrincipal.ObterDiretorioDoExecutavel: string;
begin
  result := ExtractFilePath(Application.ExeName);
end;

function TfrmPrincipal.ObterNumeroVersaoFTP: smallint;
var
  sNumeroVersao: string;
  oArquivoINI: TIniFile;
begin
  // deleta o arquivo "VersaoFTP.ini" do computador, caso exista,
  // evitando erro de arquivo já existente
  if FileExists(ObterDiretorioDoExecutavel + 'VersaoFTPAuxiliar.ini') then
    DeleteFile(ObterDiretorioDoExecutavel + 'VersaoFTPAuxiliar.ini');

  // baixa o arquivo "VersaoFTP.ini" para o computador
  IdFTP1.Get('VersaoFTPAuxiliar.ini',
    ObterDiretorioDoExecutavel + 'VersaoFTPAuxiliar.ini', True, True);

  // abre o arquivo "VersaoFTP.ini"
  oArquivoINI := TIniFile.Create(ObterDiretorioDoExecutavel +
      'VersaoFTPAuxiliar.ini');
  try
    // lê o número da versão
    sNumeroVersao := oArquivoINI.ReadString('VersaoFTP', 'Numero', EmptyStr);

    // retira os pontos (exemplo: de "1.0.1" para "101")
    sNumeroVersao := StringReplace(sNumeroVersao, '.', EmptyStr,
      [rfReplaceAll]);

    // converte o número da versão para número
    result := StrToIntDef(sNumeroVersao, 0);

    // ShowMessage('ftp '+sNumeroVersao);
  finally
    FreeAndNil(oArquivoINI);
  end;
end;

function TfrmPrincipal.ObterNumeroVersaoLocal: smallint;
var
  sNumeroVersao: string;
  oArquivoINI: TIniFile;
begin
  // abre o arquivo "VersaoLocal.ini"
  oArquivoINI := TIniFile.Create(ObterDiretorioDoExecutavel +
      'VersaoLocalAuxiliar.ini');
  try
    // lê o número da versão
    sNumeroVersao := oArquivoINI.ReadString('VersaoLocal', 'Numero', EmptyStr);

    // retira os pontos (exemplo: de "1.0.0" para "100")
    sNumeroVersao := StringReplace(sNumeroVersao, '.', EmptyStr,
      [rfReplaceAll]);

    // converte o número da versão para número
    result := StrToIntDef(sNumeroVersao, 0);
    // ShowMessage('local'+sNumeroVersao);
  finally
    FreeAndNil(oArquivoINI);
  end;
end;

procedure TfrmPrincipal.Periodo;
begin
  DmRel.qrrelatorio.Open;
  DmRel.qrrelatorio.Edit;
  DmRel.qrrelatorio.FieldByName('LINHA2').AsString := 'Período: ' +
    (FormatDateTime('dd/mm/yyyy', dataI.Date)) + ' a ' +
    (FormatDateTime('dd/mm/yyyy', dataF.Date));

end;

procedure TfrmPrincipal.ReiniciarAplicacao;
begin
  ShowMessage
    ('Atualização concluída com sucesso. A aplicação será reiniciada.');
  ShellExecute(0, nil, PChar(Application.ExeName), '', nil, SW_SHOWNORMAL);
  Application.Terminate;
end;

procedure TfrmPrincipal.btnRelatorioClick(Sender: TObject);
begin
  pcAtendimento.Visible := True;
  pcAtendimento.ActivePage := tabRel;
  tabRel.TabVisible := True;
  tabBoleto.TabVisible := False;

  AtualizarVersao;

end;

procedure TfrmPrincipal.SpeedButton2Click(Sender: TObject);
begin
  pcAtendimento.Visible := True;
  pcAtendimento.ActivePage := tabBoleto;
  tabRel.TabVisible := False;
  tabBoleto.TabVisible := True;
end;

procedure TfrmPrincipal.testarInternet;
begin
  // testa se tem internet
  try
    IdHTTP.Get('http://www.google.com.br');
    IdHTTP.ProxyParams.BasicAuthentication := True;
    IdHTTP.Request.BasicAuthentication := True;

    // ativa a qrweb ser tiver internet
    dm.web.Connected := True;
    // showmessage('Tem conexão');
    // AtualizarVersao;
  except
    ShowMessage(
      'Não tem internet, não será possivel acessar o controle de licença');
    // dm.web.Connected := false;
  end;
end;

procedure TfrmPrincipal.versaoRelatorio;
begin
  DmRel.qrrelatorio.Open;
  DmRel.qrrelatorio.Edit;
  DmRel.qrrelatorio.FieldByName('LINHA3').AsString :=
    'Versão: ' + ExeInfo1.FileVersion;
end;

end.
